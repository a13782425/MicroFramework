name: Publish packages to GitHub Packages

on:
  push:
    branches:
      - main
    paths:
      - 'packages/com.timeslip.microframework.core/package.json' # 只监控 package.json 文件的变化
  workflow_dispatch:
    inputs:
      package_name:
        description: 'Publish Core'
        required: true
        default: 'com.timeslip.microframework.core'
concurrency:
  group: "publish-packages" # 如果有新的工作流实例触发，取消正在进行中的同组实例
  cancel-in-progress: true
jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: 
          - name: com.timeslip.microframework.core
            path: 'packages/com.timeslip.microframework.core/'
    steps:
    - uses: actions/checkout@v3
    
    - name: Debugging Event Information
      run: |
        echo "Event Name: ${{ github.event_name }}"
        if [ "$GITHUB_EVENT_NAME" == "push" ]; then
          echo "Push event detected"
          for file in $(git diff-tree --no-commit-id --name-only -r HEAD~1 HEAD); do
            echo "Changed file: $file"
          done
        elif [ "$GITHUB_EVENT_NAME" == "workflow_dispatch" ]; then
          echo "Workflow dispatch event detected"
          echo "Specified package: ${{ github.event.inputs.package_name }}"
        fi
        
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '14.x'
        registry-url: 'https://npm.pkg.github.com/'

    - run: npm install --only=prod
    
    - name: Debugging Matrix Values
      run: |
        echo "Package Name: ${{ matrix.package.name }}"
        echo "Package Path: ${{ matrix.package.path }}"
        
    - name: Check if previous commit exists # 检查是否有前一个提交
      id: check_previous_commit
      run: |
        if git rev-parse --verify HEAD~1 &> /dev/null; then
          echo "::set-output name=has_previous_commit::true"
        else
          echo "::set-output name=has_previous_commit::false"
        fi

    - name: Get previous version # 获取前一个提交的版本
      id: get_previous_version
      if: steps.check_previous_commit.outputs.has_previous_commit == 'true'
      run: |
        PREVIOUS_VERSION=$(git show HEAD~1:packages/${{ matrix.package.name }}/package.json | jq -r '.version')
        echo "::set-output name=previous_version::$PREVIOUS_VERSION"
      shell: bash

    - name: Set initial version # 设置初始版本为空字符串
      id: set_initial_version
      if: steps.check_previous_commit.outputs.has_previous_commit == 'false'
      run: |
        echo "::set-output name=previous_version::"

    - name: Get current version # 获取当前提交的版本
      id: get_current_version
      run: |
        CURRENT_VERSION=$(jq -r '.version' packages/${{ matrix.package.name }}/package.json)
        echo "::set-output name=current_version::$CURRENT_VERSION"
      shell: bash

    - name: Compare versions # 比较版本号
      id: compare_versions
      run: |
        if [ "${{ steps.get_previous_version.outputs.previous_version }}" != "${{ steps.get_current_version.outputs.current_version }}" ]; then
          echo "Version changed from ${steps.get_previous_version.outputs.previous_version} to ${steps.get_current_version.outputs.current_version}"
          echo "::set-output name=should_publish::true"
        else
          echo "Version did not change"
          echo "::set-output name=should_publish::false"
        fi

    - name: Restore latest commit # 切换回最新的提交
      uses: actions/checkout@v3
      with:
        ref: ${{ github.sha }}
        
    - name: Create .npmrc file
      if: steps.compare_versions.outputs.should_publish == 'true'
      run: |
        echo "//npm.pkg.github.com/:_authToken=${{ secrets.PACKAGE_TOKEN }}" > ~/.npmrc
        echo "@a13782425:registry=https://npm.pkg.github.com/" >> ~/.npmrc
        cat ~/.npmrc
      env:
        GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
        
    - name: Build and publish ${{ matrix.package.name }}
      if: steps.compare_versions.outputs.should_publish == 'true' || (github.event_name == 'workflow_dispatch' && github.event.inputs.package_name == matrix.package.name)
      run: |
        echo "Checking if changes match ${{ matrix.package.path }}"
        cd ${{ matrix.package.path }}
        npm config set registry https://npm.pkg.github.com/
        npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
